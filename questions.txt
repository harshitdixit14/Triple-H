day 1 
    date = 15/02/25
    HQ1= https://leetcode.com/problems/number-of-great-partitions/description/
    description=
    given 1D array nums and integer k we have to find count of partitions such that
    sum of each partition in >= k.
    so going other way around and finding the count in which at least one partition has sum<k
    then subtracting the count with total count to have desired answer.
    Reasoning behind why " finding negation of a problem "
    => becoz first I tried the simple method which was requiring me to create a DP table which was
    giving MLE as sum was exceeding memory limit.
    This time with finding negation we only have to consider k sum only.
    negation of the conditions that we have to count
    (1) s1<k and s2<k
    (2) s1<k and s2>=k
    (3) s1>=k and s2<k
    Now (1) will never occur because s1+s2>=2*k always true.
    there fore answer = total_partitions - 2*invalid_count
    as count(s1<k and s2>=k) == count(s1>=k and s2<k)

day 2
    date = 21/02/25
    HQ1= https://leetcode.com/problems/minimum-number-of-operations-to-make-arrays-similar/?envType=problem-list-v2&envId=greedy
    description=
    you are given two arrays nums and target in one operatio you can select pair of indices (i,j)
    such that nums[i]=nums[i]+2 and nums[j]=nums[j]-2
    return minimum number of operations required to convert nums to target

    key point to notice =

    by selecting indices we are either adding 2 or subtracting 2. By doing this we can only
    convert even to another even number of odd to another odd number.
    // Even to odd conversion is not possible
    // another noticed point that count of even and odd in both nums and target are equal
    // then only it is possible to convert nums to target
    so by keeping this in mind I separated even and odd elements from both nums and target array
    before that sorting nums and target so that resulting array also be sorted.
    All the array are ( nums_odd, nums_even, target_odd, target_even )
    traverse in nums_odd and target_odd parallely and compute number of operation required for
    conversion
    our formula becomes odd_operations = sum over all i such that 0<=i<=nums_odd.size() (abs(nums_odd[i]-target_odd[i])/2)
    similarly for even_operations on nums_even and target_even
    then return (odd_operations+even_operations)/2;
    